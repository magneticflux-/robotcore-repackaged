apply plugin: 'com.android.library'
apply plugin: 'digital.wup.android-maven-publish'

android {
    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 19
        versionCode 8
        versionName "3.5.5"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a"
        }

        consumerProguardFiles 'proguard-rules.pro'
    }
    buildTypes {
    }

    flavorDimensions 'content'

    productFlavors {
        full {
            dimension 'content'
        }
        lite {
            dimension 'content'
        }
    }

    defaultPublishConfig "fullRelease"
}

publishing {
    publications {
        android.libraryVariants.all { variant ->
            if (variant.name.matches(".+(Release)"))
                "maven${variant.name.capitalize()}Aar"(MavenPublication) {
                    from components.findByName("android${variant.name.capitalize()}")
                    groupId 'com.github.modular-ftc'
                    artifactId 'robotcore-repackaged'
                    version "${android.defaultConfig.versionName}-${variant.name.replace("Release", "")}"

                    artifact sourcesJar
                    artifact javadocJar
                }
        }
    }
}

task install(dependsOn: publishToMavenLocal) {
}

dependencies {
    implementation 'com.android.support:support-annotations:27.0.0'

    implementation 'com.github.modular-ftc:vuforia-repackaged:3.5.0'

    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'org.danilopianini:gson-extras:0.2.1'

    fullImplementation 'com.google.errorprone:javac:1.8.0-u20'

}

//For JitPack

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
/*
artifacts {
    archives sourcesJar
    archives javadocJar
}
*/